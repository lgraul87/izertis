{"ast":null,"code":"import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nvar PaginationService = /** @class */function () {\n  function PaginationService() {\n    this.change = new EventEmitter();\n    this.instances = {};\n    this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\n  }\n  PaginationService.prototype.defaultId = function () {\n    return this.DEFAULT_ID;\n  };\n  /**\r\n   * Register a PaginationInstance with this service. Returns a\r\n   * boolean value signifying whether the instance is new or\r\n   * updated (true = new or updated, false = unchanged).\r\n   */\n  PaginationService.prototype.register = function (instance) {\n    if (instance.id == null) {\n      instance.id = this.DEFAULT_ID;\n    }\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      return true;\n    } else {\n      return this.updateInstance(instance);\n    }\n  };\n  /**\r\n   * Check each property of the instance and update any that have changed. Return\r\n   * true if any changes were made, else return false.\r\n   */\n  PaginationService.prototype.updateInstance = function (instance) {\n    var changed = false;\n    for (var prop in this.instances[instance.id]) {\n      if (instance[prop] !== this.instances[instance.id][prop]) {\n        this.instances[instance.id][prop] = instance[prop];\n        changed = true;\n      }\n    }\n    return changed;\n  };\n  /**\r\n   * Returns the current page number.\r\n   */\n  PaginationService.prototype.getCurrentPage = function (id) {\n    if (this.instances[id]) {\n      return this.instances[id].currentPage;\n    }\n  };\n  /**\r\n   * Sets the current page number.\r\n   */\n  PaginationService.prototype.setCurrentPage = function (id, page) {\n    if (this.instances[id]) {\n      var instance = this.instances[id];\n      var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\n      if (page <= maxPage && 1 <= page) {\n        this.instances[id].currentPage = page;\n        this.change.emit(id);\n      }\n    }\n  };\n  /**\r\n   * Sets the value of instance.totalItems\r\n   */\n  PaginationService.prototype.setTotalItems = function (id, totalItems) {\n    if (this.instances[id] && 0 <= totalItems) {\n      this.instances[id].totalItems = totalItems;\n      this.change.emit(id);\n    }\n  };\n  /**\r\n   * Sets the value of instance.itemsPerPage.\r\n   */\n  PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\n    if (this.instances[id]) {\n      this.instances[id].itemsPerPage = itemsPerPage;\n      this.change.emit(id);\n    }\n  };\n  /**\r\n   * Returns a clone of the pagination instance object matching the id. If no\r\n   * id specified, returns the instance corresponding to the default id.\r\n   */\n  PaginationService.prototype.getInstance = function (id) {\n    if (id === void 0) {\n      id = this.DEFAULT_ID;\n    }\n    if (this.instances[id]) {\n      return this.clone(this.instances[id]);\n    }\n    return {};\n  };\n  /**\r\n   * Perform a shallow clone of an object.\r\n   */\n  PaginationService.prototype.clone = function (obj) {\n    var target = {};\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        target[i] = obj[i];\n      }\n    }\n    return target;\n  };\n  return PaginationService;\n}();\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\nvar PaginatePipe = /** @class */function () {\n  function PaginatePipe(service) {\n    this.service = service;\n    // store the values from the last time the pipe was invoked\n    this.state = {};\n  }\n  PaginatePipe.prototype.transform = function (collection, args) {\n    // When an observable is passed through the AsyncPipe, it will output\n    // `null` until the subscription resolves. In this case, we want to\n    // use the cached data from the `state` object to prevent the NgFor\n    // from flashing empty until the real values arrive.\n    if (!(collection instanceof Array)) {\n      var _id = args.id || this.service.defaultId();\n      if (this.state[_id]) {\n        return this.state[_id].slice;\n      } else {\n        return collection;\n      }\n    }\n    var serverSideMode = args.totalItems && args.totalItems !== collection.length;\n    var instance = this.createInstance(collection, args);\n    var id = instance.id;\n    var start, end;\n    var perPage = instance.itemsPerPage;\n    var emitChange = this.service.register(instance);\n    if (!serverSideMode && collection instanceof Array) {\n      perPage = +perPage || LARGE_NUMBER;\n      start = (instance.currentPage - 1) * perPage;\n      end = start + perPage;\n      var isIdentical = this.stateIsIdentical(id, collection, start, end);\n      if (isIdentical) {\n        return this.state[id].slice;\n      } else {\n        var slice = collection.slice(start, end);\n        this.saveState(id, collection, slice, start, end);\n        this.service.change.emit(id);\n        return slice;\n      }\n    } else {\n      if (emitChange) {\n        this.service.change.emit(id);\n      }\n      // save the state for server-side collection to avoid null\n      // flash as new data loads.\n      this.saveState(id, collection, collection, start, end);\n      return collection;\n    }\n  };\n  /**\r\n   * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n   */\n  PaginatePipe.prototype.createInstance = function (collection, config) {\n    this.checkConfig(config);\n    return {\n      id: config.id != null ? config.id : this.service.defaultId(),\n      itemsPerPage: +config.itemsPerPage || 0,\n      currentPage: +config.currentPage || 1,\n      totalItems: +config.totalItems || collection.length\n    };\n  };\n  /**\r\n   * Ensure the argument passed to the filter contains the required properties.\r\n   */\n  PaginatePipe.prototype.checkConfig = function (config) {\n    var required = ['itemsPerPage', 'currentPage'];\n    var missing = required.filter(function (prop) {\n      return !(prop in config);\n    });\n    if (0 < missing.length) {\n      throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\n    }\n  };\n  /**\r\n   * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n   * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n   * need to check that the collection, start and end points are all identical, and if so, return the\r\n   * last sliced array.\r\n   */\n  PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\n    this.state[id] = {\n      collection: collection,\n      size: collection.length,\n      slice: slice,\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * For a given id, returns true if the collection, size, start and end values are identical.\r\n   */\n  PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\n    var state = this.state[id];\n    if (!state) {\n      return false;\n    }\n    var isMetaDataIdentical = state.size === collection.length && state.start === start && state.end === end;\n    if (!isMetaDataIdentical) {\n      return false;\n    }\n    return state.slice.every(function (element, index) {\n      return element === collection[start + index];\n    });\n  };\n  PaginatePipe = __decorate$1([Pipe({\n    name: 'paginate',\n    pure: false\n  }), __metadata(\"design:paramtypes\", [PaginationService])], PaginatePipe);\n  return PaginatePipe;\n}();\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\"\\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$1 = undefined && undefined.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nfunction coerceToBoolean(input) {\n  return !!input && input !== 'false';\n}\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\nvar PaginationControlsComponent = /** @class */function () {\n  function PaginationControlsComponent() {\n    this.maxSize = 7;\n    this.previousLabel = 'Previous';\n    this.nextLabel = 'Next';\n    this.screenReaderPaginationLabel = 'Pagination';\n    this.screenReaderPageLabel = 'page';\n    this.screenReaderCurrentLabel = \"You're on page\";\n    this.pageChange = new EventEmitter();\n    this.pageBoundsCorrection = new EventEmitter();\n    this._directionLinks = true;\n    this._autoHide = false;\n    this._responsive = false;\n  }\n  Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\n    get: function () {\n      return this._directionLinks;\n    },\n    set: function (value) {\n      this._directionLinks = coerceToBoolean(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\n    get: function () {\n      return this._autoHide;\n    },\n    set: function (value) {\n      this._autoHide = coerceToBoolean(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\n    get: function () {\n      return this._responsive;\n    },\n    set: function (value) {\n      this._responsive = coerceToBoolean(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PaginationControlsComponent.prototype.trackByIndex = function (index) {\n    return index;\n  };\n  __decorate$2([Input(), __metadata$1(\"design:type\", String)], PaginationControlsComponent.prototype, \"id\", void 0);\n  __decorate$2([Input(), __metadata$1(\"design:type\", Number)], PaginationControlsComponent.prototype, \"maxSize\", void 0);\n  __decorate$2([Input(), __metadata$1(\"design:type\", Boolean), __metadata$1(\"design:paramtypes\", [Boolean])], PaginationControlsComponent.prototype, \"directionLinks\", null);\n  __decorate$2([Input(), __metadata$1(\"design:type\", Boolean), __metadata$1(\"design:paramtypes\", [Boolean])], PaginationControlsComponent.prototype, \"autoHide\", null);\n  __decorate$2([Input(), __metadata$1(\"design:type\", Boolean), __metadata$1(\"design:paramtypes\", [Boolean])], PaginationControlsComponent.prototype, \"responsive\", null);\n  __decorate$2([Input(), __metadata$1(\"design:type\", String)], PaginationControlsComponent.prototype, \"previousLabel\", void 0);\n  __decorate$2([Input(), __metadata$1(\"design:type\", String)], PaginationControlsComponent.prototype, \"nextLabel\", void 0);\n  __decorate$2([Input(), __metadata$1(\"design:type\", String)], PaginationControlsComponent.prototype, \"screenReaderPaginationLabel\", void 0);\n  __decorate$2([Input(), __metadata$1(\"design:type\", String)], PaginationControlsComponent.prototype, \"screenReaderPageLabel\", void 0);\n  __decorate$2([Input(), __metadata$1(\"design:type\", String)], PaginationControlsComponent.prototype, \"screenReaderCurrentLabel\", void 0);\n  __decorate$2([Output(), __metadata$1(\"design:type\", EventEmitter)], PaginationControlsComponent.prototype, \"pageChange\", void 0);\n  __decorate$2([Output(), __metadata$1(\"design:type\", EventEmitter)], PaginationControlsComponent.prototype, \"pageBoundsCorrection\", void 0);\n  PaginationControlsComponent = __decorate$2([Component({\n    selector: 'pagination-controls',\n    template: DEFAULT_TEMPLATE,\n    styles: [DEFAULT_STYLES],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  })], PaginationControlsComponent);\n  return PaginationControlsComponent;\n}();\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$2 = undefined && undefined.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\nvar PaginationControlsDirective = /** @class */function () {\n  function PaginationControlsDirective(service, changeDetectorRef) {\n    var _this = this;\n    this.service = service;\n    this.changeDetectorRef = changeDetectorRef;\n    this.maxSize = 7;\n    this.pageChange = new EventEmitter();\n    this.pageBoundsCorrection = new EventEmitter();\n    this.pages = [];\n    this.changeSub = this.service.change.subscribe(function (id) {\n      if (_this.id === id) {\n        _this.updatePageLinks();\n        _this.changeDetectorRef.markForCheck();\n        _this.changeDetectorRef.detectChanges();\n      }\n    });\n  }\n  PaginationControlsDirective.prototype.ngOnInit = function () {\n    if (this.id === undefined) {\n      this.id = this.service.defaultId();\n    }\n    this.updatePageLinks();\n  };\n  PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\n    this.updatePageLinks();\n  };\n  PaginationControlsDirective.prototype.ngOnDestroy = function () {\n    this.changeSub.unsubscribe();\n  };\n  /**\r\n   * Go to the previous page\r\n   */\n  PaginationControlsDirective.prototype.previous = function () {\n    this.checkValidId();\n    this.setCurrent(this.getCurrent() - 1);\n  };\n  /**\r\n   * Go to the next page\r\n   */\n  PaginationControlsDirective.prototype.next = function () {\n    this.checkValidId();\n    this.setCurrent(this.getCurrent() + 1);\n  };\n  /**\r\n   * Returns true if current page is first page\r\n   */\n  PaginationControlsDirective.prototype.isFirstPage = function () {\n    return this.getCurrent() === 1;\n  };\n  /**\r\n   * Returns true if current page is last page\r\n   */\n  PaginationControlsDirective.prototype.isLastPage = function () {\n    return this.getLastPage() === this.getCurrent();\n  };\n  /**\r\n   * Set the current page number.\r\n   */\n  PaginationControlsDirective.prototype.setCurrent = function (page) {\n    this.pageChange.emit(page);\n  };\n  /**\r\n   * Get the current page number.\r\n   */\n  PaginationControlsDirective.prototype.getCurrent = function () {\n    return this.service.getCurrentPage(this.id);\n  };\n  /**\r\n   * Returns the last page number\r\n   */\n  PaginationControlsDirective.prototype.getLastPage = function () {\n    var inst = this.service.getInstance(this.id);\n    if (inst.totalItems < 1) {\n      // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\n      // but it makes sense to consider a single, empty page as the last page.\n      return 1;\n    }\n    return Math.ceil(inst.totalItems / inst.itemsPerPage);\n  };\n  PaginationControlsDirective.prototype.getTotalItems = function () {\n    return this.service.getInstance(this.id).totalItems;\n  };\n  PaginationControlsDirective.prototype.checkValidId = function () {\n    if (this.service.getInstance(this.id).id == null) {\n      console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\n    }\n  };\n  /**\r\n   * Updates the page links and checks that the current page is valid. Should run whenever the\r\n   * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n   * input values changes.\r\n   */\n  PaginationControlsDirective.prototype.updatePageLinks = function () {\n    var _this = this;\n    var inst = this.service.getInstance(this.id);\n    var correctedCurrentPage = this.outOfBoundCorrection(inst);\n    if (correctedCurrentPage !== inst.currentPage) {\n      setTimeout(function () {\n        _this.pageBoundsCorrection.emit(correctedCurrentPage);\n        _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\n      });\n    } else {\n      this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n    }\n  };\n  /**\r\n   * Checks that the instance.currentPage property is within bounds for the current page range.\r\n   * If not, return a correct value for currentPage, or the current value if OK.\r\n   */\n  PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\n    var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n    if (totalPages < instance.currentPage && 0 < totalPages) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n    return instance.currentPage;\n  };\n  /**\r\n   * Returns an array of Page objects to use in the pagination controls.\r\n   */\n  PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\n    // paginationRange could be a string if passed from attribute, so cast to number.\n    paginationRange = +paginationRange;\n    var pages = [];\n    // Return 1 as default page number\n    // Make sense to show 1 instead of empty when there are no items\n    var totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\n    var halfWay = Math.ceil(paginationRange / 2);\n    var isStart = currentPage <= halfWay;\n    var isEnd = totalPages - halfWay < currentPage;\n    var isMiddle = !isStart && !isEnd;\n    var ellipsesNeeded = paginationRange < totalPages;\n    var i = 1;\n    while (i <= totalPages && i <= paginationRange) {\n      var label = void 0;\n      var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\n      var openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);\n      var closingEllipsesNeeded = i === paginationRange - 1 && (isMiddle || isStart);\n      if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n        label = '...';\n      } else {\n        label = pageNumber;\n      }\n      pages.push({\n        label: label,\n        value: pageNumber\n      });\n      i++;\n    }\n    return pages;\n  };\n  /**\r\n   * Given the position in the sequence of pagination links [i],\r\n   * figure out what page number corresponds to that position.\r\n   */\n  PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\n    var halfWay = Math.ceil(paginationRange / 2);\n    if (i === paginationRange) {\n      return totalPages;\n    } else if (i === 1) {\n      return i;\n    } else if (paginationRange < totalPages) {\n      if (totalPages - halfWay < currentPage) {\n        return totalPages - paginationRange + i;\n      } else if (halfWay < currentPage) {\n        return currentPage - halfWay + i;\n      } else {\n        return i;\n      }\n    } else {\n      return i;\n    }\n  };\n  __decorate$3([Input(), __metadata$2(\"design:type\", String)], PaginationControlsDirective.prototype, \"id\", void 0);\n  __decorate$3([Input(), __metadata$2(\"design:type\", Number)], PaginationControlsDirective.prototype, \"maxSize\", void 0);\n  __decorate$3([Output(), __metadata$2(\"design:type\", EventEmitter)], PaginationControlsDirective.prototype, \"pageChange\", void 0);\n  __decorate$3([Output(), __metadata$2(\"design:type\", EventEmitter)], PaginationControlsDirective.prototype, \"pageBoundsCorrection\", void 0);\n  PaginationControlsDirective = __decorate$3([Directive({\n    selector: 'pagination-template,[pagination-template]',\n    exportAs: 'paginationApi'\n  }), __metadata$2(\"design:paramtypes\", [PaginationService, ChangeDetectorRef])], PaginationControlsDirective);\n  return PaginationControlsDirective;\n}();\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar NgxPaginationModule = /** @class */function () {\n  function NgxPaginationModule() {}\n  NgxPaginationModule = __decorate([NgModule({\n    imports: [CommonModule],\n    declarations: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective],\n    providers: [PaginationService],\n    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\n  })], NgxPaginationModule);\n  return NgxPaginationModule;\n}();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}